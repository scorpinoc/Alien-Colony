using System;
using Data.Data.Common;

namespace Data.Data.JobActions
{
    /// <summary>
    /// Action wich move <see cref="Colonist"/> to some new position using <see cref="Colonist.Move"/>
    /// </summary>
    public class MoveAction : JobAction
    {
        //private uint _ticksLeft;
        private Direction _direction = Direction.Stop;
        private Position _targetPosition;

        ///// <summary>
        ///// number of <see cref="Ticks"/> <see cref="Colonist"/> worker move to position generated by <see cref="PositionAction"/>
        ///// <para>realtime Target traking is set on 0</para>
        ///// </summary>
        //// ReSharper disable once MemberCanBePrivate.Global
        //public uint Ticks { get; }

        // ReSharper disable once SuggestBaseTypeForParameter
        public MoveAction(/*uint ticks, */PositionAction nextAction) : base(nextAction)
        {
            if (nextAction == null)
                throw new ArgumentNullException($"{nameof(NextAction)} of {nameof(MoveAction)} can't be {null}");
            //Ticks = ticks;
        }

        #region methods

        public void Move(Colonist worker)
        {
            if (worker == null)
                throw new ArgumentNullException(nameof(worker));

            var current = worker.Position;
            _targetPosition = ((PositionAction)NextAction).Target(worker); // todo null check
            NewDirection(current);

            #region old

            //var current = worker.Position;
            //if (_ticksLeft == 0)
            //{
            //    _targetPosition = ((PositionAction)NextAction).Target(worker);
            //    NewDirection(current);
            //    _ticksLeft = Ticks;
            //}
            //else if (current.Distance(_targetPosition) < 1)
            //{
            //    _direction = Direction.Stop;
            //    _ticksLeft = 0;
            //}
            //else
            //    --_ticksLeft;

            #endregion
            
            worker.Move(_direction);
        }

        private void NewDirection(Position current)
        {
            _direction = current.Y == _targetPosition.Y
                ? Direction.Stop
                : (current.Y > _targetPosition.Y ? Direction.North : Direction.South);
            if (current.X != _targetPosition.X)
                _direction = current.X > _targetPosition.X
                    ? (_direction == Direction.Stop
                        ? Direction.West
                        : (_direction == Direction.North ? Direction.NorthWest : Direction.SouthWest))
                    : (_direction == Direction.Stop
                        ? Direction.East
                        : (_direction == Direction.North ? Direction.NorthEast : Direction.SouthEast));
        }

        #endregion
    }
}